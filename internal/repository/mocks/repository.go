// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	repository "main.go/internal/repository"
)

// MockTasksRepo is a mock of TasksRepo interface.
type MockTasksRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTasksRepoMockRecorder
}

// MockTasksRepoMockRecorder is the mock recorder for MockTasksRepo.
type MockTasksRepoMockRecorder struct {
	mock *MockTasksRepo
}

// NewMockTasksRepo creates a new mock instance.
func NewMockTasksRepo(ctrl *gomock.Controller) *MockTasksRepo {
	mock := &MockTasksRepo{ctrl: ctrl}
	mock.recorder = &MockTasksRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTasksRepo) EXPECT() *MockTasksRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockTasksRepo) Add(ctx context.Context, task *repository.Task) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, task)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockTasksRepoMockRecorder) Add(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTasksRepo)(nil).Add), ctx, task)
}

// DeleteById mocks base method.
func (m *MockTasksRepo) DeleteById(ctx context.Context, id int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockTasksRepoMockRecorder) DeleteById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockTasksRepo)(nil).DeleteById), ctx, id)
}

// GetById mocks base method.
func (m *MockTasksRepo) GetById(ctx context.Context, id int64) (*repository.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*repository.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockTasksRepoMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockTasksRepo)(nil).GetById), ctx, id)
}

// List mocks base method.
func (m *MockTasksRepo) List(ctx context.Context) ([]*repository.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]*repository.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTasksRepoMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTasksRepo)(nil).List), ctx)
}

// Update mocks base method.
func (m *MockTasksRepo) Update(ctx context.Context, task *repository.Task) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, task)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTasksRepoMockRecorder) Update(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTasksRepo)(nil).Update), ctx, task)
}

// MockProjectsRepo is a mock of ProjectsRepo interface.
type MockProjectsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockProjectsRepoMockRecorder
}

// MockProjectsRepoMockRecorder is the mock recorder for MockProjectsRepo.
type MockProjectsRepoMockRecorder struct {
	mock *MockProjectsRepo
}

// NewMockProjectsRepo creates a new mock instance.
func NewMockProjectsRepo(ctrl *gomock.Controller) *MockProjectsRepo {
	mock := &MockProjectsRepo{ctrl: ctrl}
	mock.recorder = &MockProjectsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectsRepo) EXPECT() *MockProjectsRepoMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockProjectsRepo) Add(ctx context.Context, project *repository.Project) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, project)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockProjectsRepoMockRecorder) Add(ctx, project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockProjectsRepo)(nil).Add), ctx, project)
}

// DeleteById mocks base method.
func (m *MockProjectsRepo) DeleteById(ctx context.Context, id int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockProjectsRepoMockRecorder) DeleteById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockProjectsRepo)(nil).DeleteById), ctx, id)
}

// GetById mocks base method.
func (m *MockProjectsRepo) GetById(ctx context.Context, id int64) (*repository.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*repository.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockProjectsRepoMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockProjectsRepo)(nil).GetById), ctx, id)
}

// List mocks base method.
func (m *MockProjectsRepo) List(ctx context.Context) ([]*repository.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]*repository.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockProjectsRepoMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockProjectsRepo)(nil).List), ctx)
}

// Update mocks base method.
func (m *MockProjectsRepo) Update(ctx context.Context, user *repository.Project) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockProjectsRepoMockRecorder) Update(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProjectsRepo)(nil).Update), ctx, user)
}
